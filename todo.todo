------------------------------------------------
TODO: https://trello.com/b/0Z1oVdg9/under-london
------------------------------------------------
I don't know whether I prefer keeping the list here or on Trello.
Trello is nice, but it's ALL THE WAY OVER THERE in a different program! (Which requires my internet to work...)

Handy emojis: âœ” âœ– â„¢ ðŸ’¡

Notes for searching:
	@Speed - Thing could be faster
	@Size - Thing could use less memory
	@Copypasta - Copy-pasted code, should probably be factored together
	@Cleanup - Stuff that needs investigating/organising, when it's convenient
	@Hack - Hacks
	@Leak - Memory leaks
	@Balance - Game design things to tweak
	@Deprecated - Deprecated stuff

------------------------------------------------

BUG: we can click through the "Data overlay" button

UI Widgets:
- Radio buttons
âœ” Checkboxes
- Sliders (eg, volume)
- Dropdown boxes? (eg, locale)
	- I guess these are equivalent to our "menu buttons" but with special styling
- Tabs!
	- Basically just radio buttons with fancy styling

Keyboard shortcuts for buttons
- Don't do this inside the button logic, where it doesn't belong; instead, have a function to call to see if a keyboard shortcut has been pressed. We have a basic system already for debug shortcuts, but will want a nicer system. Probably give different shortcut actions names, like ACTION_CANCEL, and then the user sets a shortcut for that, and you'll do something like:
		if (UI::putButton("Cancel", ...) || shortcutWasPressed(ACTION_CANCEL))
		{
			// Cancel stuff
		}

Settings window that lets you modify them
	(Instead of the Settings Screen we have now. A window makes more sense.)
	- BUG: Setting fullscreen doesn't update things correctly. Maybe because we're not setting the resolution?

Multi-threading!
- Figure out how to get it working at all
- Loading screen, as a test!

Building problems:
- I think we want to split this into two concepts: Access, and Problems
	- Access is stuff like "has power", "has water"
	- Because, not having water is not an urgent problem - water is not a requirement in SimCity.
	- This also works for Impressions-style games
- Problem icon entities (Zots!)
	- Maintain minimum distance between them, so it's not cluttered and chaotic.
	- Appear/disappear when the building gains or loses its problem
	- Somehow, we need to make sure that preventing overlaps doesn't result in none showing at all if one is removed!
		(eg, if a 5x5 area is without power, but only one icon is shown in the middle, then demolishing the building in the middle would remove the icon. We need to make sure other icons pop up in its place so the lack of power is still indicated for the other buildings in that area.)
		-> Have the Zots system respond to dirty-rects and regenerate the zots
- Problems have a start time. This gives some breathing room so that briefly having a problem doesn't immediately have consequences.

Multi-building lots!
- See notes, titled "Building Complexes". Basically, give buildings a parent, which they appear as part of.
- Grown buildings can thus be constructed from pieces by the game
- Civic buildings can also be built from pieces, by the player, like SC2013.

Move "keepItemOrder" concept from ChunkedArray methods to a bool field.
- Check uses, but probably, we either always want a given array to stay in order, or we never do.

Would be nice if items in Pools didn't have to extend PoolItem. Can we sneak the prev/next data in secretly instead?
- The catch is that allocateItem() would need to know about that extra size.
- So, maybe we change how that works entirely? At least 2 uses of Pools do require fancy logic in allocateItem() though.

Text Input:
- Guide for handling textinputs properly: https://wiki.libsdl.org/Tutorials/TextInput
	- It's pretty scanty, but we do see there's a way to tell it where our text input is, so the OS can make that look correct.

BUFFS! (See paper notes)
- Ordinances are a buff, a cost calculation, a name and a description
	- To avoid exploits, they'd need to only come into effect once paid for. eg, when you turn one on, nothing happens until the next budget happens, and then the ordinance is in effect until the following budget. Otherwise you could disable them just before the budget and then re-enable them afterwards, to get them for free! (Or vice-versa with ones that earn money: enable them only for the budget, and avoid the negative effects the rest of the time.)

RANDOM EVENTS!
	These do a whole lot of good for Paradox's games, so let's copy them!
	Paradox's format: https://eu4.paradoxwikis.com/Event_modding
- Title, description text, etc
- Triggers: circumstances that are required or that block the event from happening
	- These can be combined in complex ways. Paradox format uses a tree structure
- Chance of happening: Paradox uses a "mean time to happen" calculation to make it easier to understand in human terms
- Set of options:
	- Each has a description, and a list of effects. (Buffs, direct stat changes, anything.)

STATS!
- Record statistics once per day, then aggregate ones each month and year (probably averages are most useful)
- Each layer (or mod) can register their own statistics. They'd provide a name and a callback function, and possibly a range of possible values. When the statistics system wants to record the daily stats, it calls all those functions to get their current value.
- Statistics include population, finances, etc. But also we can include things like tax rates and funding levels, so we can view how they affect other stats.
- Might want the ability to record "events" to the stats log too. Showing when an ordinance was enacted, or when a coal power plant was built or demolished etc, gives context to the changes you might see graphed.
- Viewing statistics wants to allow you to choose what appears on the graph, maybe like SC3K. Save combinations that you like for easy reference. Have several pre-defined ones too, based on category. (eg, financial things.)
- SC3K also has pie charts for displaying percents of things. That could be useful, but needs more thought.
- Saving these probably wants some kind of compression. It's a whole bunch of data.

Placeholder font that's hard-coded. Tricky!
- Then, we can have placeholder styles too

Lua scripting?
- We want a way of doing arbitrary calculations for Buffs, and this would also allow more interesting behaviour, especially with mods. But, it's also a big job to implement.
- If we do, we can replace our data-file formats with lua scripts calling functions to define those game-objects. That makes reloading more difficult though. Right now we can reload an individual buildings file, but with lua, it'd be hard to track which things come from which files, so we'd probably have to reload all of them.

Police coverage is briefly too high in some places after placing a police station, not sure why.
	- We also have an overflow issue with too many police stations' effects overlapping

Saving and loading!
- On load, we make sure the simulation is "warmed up" before actually letting the player start. So, probably mark the whole city as dirty for every layer, and then let them all process completely.
	- Another option would be to save all of the "cached" data in the save file, so loading can just continue where you left off without having to warm up first. But that mean saving more data, and it opens us up for problems with the simulation changing over time and the data it needs being missed from older saves. So, recalculating things fresh is safer, even though it could mean the simulation state is slightly different after a save-load loop, because while playing the simulator is always using slightly old data because things update gradually. That should be a really minor issue though.
- Crashing while loading a save game should NEVER happen. Be super careful with all data we read in. It may well be impossible to prevent it entirely, but this is an area with a lot of opportunities for corrupt data!
- Also, we want to prevent crashing *after* loading as much as possible. Some kind of validation after loading the file is complete, to make sure the city itself makes sense, would be a good idea. I'm not sure what that would involve really, but catching errors and reporting them is much better than just crashing.
- LZ77-based compression option. https://en.wikipedia.org/wiki/LZ77_and_LZ78

Window procs should decide the window title instead of showWindow(), it's weird having it there.

Multiple Cities
- Our eventual goal, the game I actually want to make, is code-named "Cities In Space". It involves having multiple colony-cities (different planets, etc) which trade resources between.
- That means, we'll need to move away from having one single City struct, and be able to support multiple of them, running in parallel.
- Honestly, I don't like the name "City" for the struct anyway. Not sure what it *should* be called though.
	- Could call each one a "World", and the overall game state the "Universe"? (Unless we want to have multiple cities on one planet, then it'd be confusing?)
	- "Map" is a decent term, but it's also what you'd call the minimap. Though actually, if it's a "MiniMap" that's fine.

Multiple buildings per tile?
- I'm starting to think our "building pointer per tile" thing is too rigid. There are several situations where we might want multiple buildings on a single tile:
	- Water pipes or subway tunnels
	- Power lines over roads
	- Even something like adding a bus stop to a road tile (SC4 RTMT style)
- It's definitely convenient having that tile->building lookup, but there are other ways of doing it.
	eg, we *already* store a list of buildings in each CitySector!
- Then, we can maybe abandon the Building/Entity separation. Make buildings be entities, stop handling them specially.
- Things that would have to change:
	- Tile inspection would have to query all buildings overlapping that tile, and show info about them all perhaps
	- "Can I build this here?" needs to consider what buildings are on the tile, not just "is it clear?"
		- I generally want to improve that system, so we can do bridges over water!

Automatically record, and output to a file, which strings are missing from the current locale. Possibly put this behind a setting which defaults to false, to reduce the performance impact. - See comment in getText()

Make textures always be powers of two...
- Either produce atlases that are always powers of two, or just round up the GL texture size to the nearest one and compensate the UVs. Probably both of these are a good idea.

DrawGrid textures
- Maybe cache each layer's texture instead of sending it every frame? It's already pretty fast though.
- Pass UVs to drawGrid() so that it doesn't just draw over the whole map

A lot of stuff is hard-coded in the renderer now... probably we don't want setshader/settexture to be unique things after all? Rather, a drawRects or drawGrids etc call will do its own texture/shader setup. Maybe don't pass the shaderID in at all, but we'll see... I might want to vary the shader per draw call sometimes. Well, eg, text and pixel art are the same except a different shader! So yeah that's still necessary.

Land value builidng-effect calculation is super slow.
- Maybe we should spread it out over multiple frames? Though I'm not sure how to do that... yeah, well, the issue we have is updating the whole map as one dirty-rect, and you can't partially do that. If we had a bunch of rects, we could handle them one at a time and break it up that way... maybe we could specify a max-size for dirty rects and have it break them up automatically? Or maybe we just limit the size of any player inputs so that whole-city rects only happen on load. (That latter option sounds like a good idea for lots of things.)

Texture-linking 2.0:
- Not just about linking textures!
- A building def for eg roads is split into variants. eg, a corner variant is distinct from a straight variant. Each is distinct but still recognised as a road. The def defines which one is used in a given situation. eg, "if there are roads west and north of this, select the north-west-corner variant".
	-> (side note: these are all "networks" so maybe we could split this from the regular builidng code?)
	- We'd probably want to eventually just define straight/corner/T/X/diagonals pieces instead of every single rotational variant of those. Just variant+rotation.
	- In SC4 (see https://wiki.sc4devotion.com/index.php?title=Individual_Network_RULs) a network tile variant is chosen by: firstly which connections the tile has, then which other network tiles (and their connections) are required to be in which other positions relative to it, and then a texture is chosen and transformed.
		-> This implies that when building/demolishing networks, you're really just modifying the "connections" each tile has, and then an appropriate building is displayed that matches that internal model.
	- Initially we can just check N/E/S/W of the tile to keep things simple.
- Somehow we want to merge the "place a building on top of another" thing into this?
	- eg, power-line-over-road can be an automatic building if a road goes one direction and a power line goes the orthogonal direction across the same tile.
	- Call these "intersections".
	- SC4: ( https://wiki.sc4devotion.com/index.php?title=Network_Specs/IntersectionSolutions_RUL )
		-> When the player attempts to build one network across a different one, run down the list of possible intersections of those types. The intersection is chosen based on N/E/S/W tiles of both networks and how they connect to the crossing tile (straight, diagonally, etc). The valid option is then flipped/rotated as necessary.
		- So, here it specifies what we'd call a Building to be placed at that spot, and not a Variant. (Which makes sense because it's effectively multiple building types otherwise!) (Though... we could implement this as a Building per intersection combination, and then variants within it. eg, one power-line-over-road building with variants for straight/diagonal combinations.)
- Terrain also wants a variants system... probably we can reuse a lot of this for that. So, you define that there is water here and sand there and grass there, and then it picks an appropriate sprite for it.
	- This implies we want two parts to this: one is pickVariant() which you give the context to and the possible options, and it returns the variant you want; and the other part is code that produces that context information. Because the network system and the terrain system work on different underlying data.

Figure out a better solution for storing the keys in fisxed-size HashTables (and maybe HashTables in general)
- One idea: Have space in the HashTableEntry to keep the key, if they're always below a given size?
	-> But, how do we make the size variable from one HashTable to another? Do we even want to do that?
- Alternative: Require that keys are stored somewhere outside of the HashTable?
- IDK!

Zones:
- Desirability per zone type
	- (later, make this per *spawn* type, which is more specific)
	- Desirability is used to prioritise new developments
		âœ” Sectors store some kind of aggregate desirability score, either average or the max tile value
		âœ” ZoneLayer keeps a sorted list of desirable sectors, per zone type?
		- Buildings are grown in the most desirable place within a sector first
	- Desirability for a tile is affected by if it's already got a building there, and how recently it was constructed. (Will need to record building construction time somehow! And have a game clock.)
		- So, the how-good-a-place-is weight is "desirability - penalty"
- @RandomIterate: The random selection in findGrowableBuildingDef() is biased, making options that appear after invalid ones more likely to be chosen. This is bad, but I'm not sure how growing is going to happen in the end - the current "grow one at a time" method might be replaced with a "grow a block at a time" one, where the code would be quite different.
- @RandomIterate: Picking a random x,y within a sector to start with is also biased! But, we'll replace it with a prioritised system outlined above, so this will get fixed.
- Grow blocks of buildings at once
	- Need to figure out how this will work, as there are a bunch of options.
		- SC3K approach is to distinguish between building lots and filler lots, and then fill an area with lots that are a % of each. Then, there are also specific rules for developing a house and surrounding garden, or farms, or other larger-scale blocks.
		- SC4 approach is to have zones parcelled up, and find lots that match the parcels. I don't like this much, it's more content-heavy. But when developing, it then seems to find a rectangle of similar parcels and fill them all with variations of the same building.
	- I'm currently favouring a more 3K-like approach... Define puzzle-pieces, which are combined together to visually form a building and its surroundings. The rules for putting them together are also defined in data.
		-> In fact, we could even have them all be recognised as a single lot, so the player isn't exposed to the fact that it's made of pieces.
- Make the "how many buildings to grow at once" number variable based on the city population for that zone type, so that a larger city can grow more at once? Ehhh maybe that's a bad idea... a larger city theoretically should be growing more dense buildings, and growing a large patch of dense things could be really unstable, demand-wise.

- Statistics
	- Jobs
	- Population
- Data
	- Land value
	- Pollution
	- Fire
	- Crime
	- Fire coverage
	- Police coverage
	- Traffic density

Pollution:
- Eventually we probably want it to build up and change over time:
	- Buildings add or remove an amount from their tiles.
	- Tile values are blended somehow, so that pollution spreads out, and fades slightly.
	- (This means that a big plume of smog doesn't pop in or out of existence if a factory is built or demolished.)
- Transport also creates pollution, depending on type and volume. (And any clean-car-incentive type ordinance effects.)
- Fire also creates pollution

Crime:
âœ” Building-coverage, which is additive, with only one class.
âœ” A global prisoner count/capacity.
- Crime risk per tile, used internally.
- A per-tile value for "how much" crime there is in that area. It should be a fairly long-term thing, so a single crime downtown doesn't destroy desirability, but if crimes happen there on a regular basis, people don't want to be there.
	- Possibly, a crime occurring splats an area-of-effect over a wide-ish area, and all tiles gradually tick down over time.
- I think we want to use a SC4-style model:
	- Various factors contribute to a population of criminals.
		- eg: unemployment
	- Each tick, each criminal may commit a crime.
	- Crimes are more likely to occur in wealthy areas, and places with lower police presence.
	- The criminal then has a chance of being caught, based on the police presence and budget etc.
	- They're then moved from the criminal population to the prisoner population.
	- When a prisoner completes their sentence, they may or may not return to the criminal population, depending on various factors.
		- eg: reform programs, prison conditions, overall police presence in city.
- Model severity of crimes too, somehow? I know SC4 does that but I don't really understand it too well. Obviously more severe crimes have a bigger impact - a murder is much worse than petty theft.
	- Maybe, criminals even have a "severity" level, and over time without being caught, that level increases. The higher the level, the more severe the crimes they can commit, with a randomness factor.
- I think I'm over-thinking crime right now. If the calculations are fairly simple, we definitely could do individual simulations of the criminals, similar to a particle system, but I'm not sure. Just throwing ideas out there!
	- I got distracted trying to figure out what a crime particle would be called. I believe it'd be an enklemon from: https://en.wiktionary.org/wiki/%CE%AD%CE%B3%CE%BA%CE%BB%CE%B7%CE%BC%CE%B1
	- (Actually, "felon" would be appropriate!)

Education:
- Building coverage grids
	- Primary school
	- High school
	- College
	- University
	- Library
	- Museum
- List of education buildings (per type???)
- Actual education quotient per tile is set to a base value when someone moves in, and then gradually changes over time based on the coverage of each building class, funding, and other factors.
	- Education is more complicated because different classes are supposed to cater to different age ranges. I don't know if we want to simulate age or not? If we don't, we'd still want the different classes to have different effects, so that you can't get perfect education by spamming libraries, for example.

Health:
- Building coverage grids
	âœ” Hospital
	- Local clinic as a separate coverage type?
âœ” List of health buildings
- Health quotient per residential building
	- Set to some base value at some point?????
		- I kind of dislike the SC4 system... When a building is constructed, it gets a flat health/edu value, regardless of how good the healthcare is in your city. So immigration drops the average down! I'm thinking maybe it should just be the average? Needs thought.
	- Each update, modified by health coverage %, pollution, ordinances
- Health coverage also desired by com/ind/civic buildings.
	- They won't have a health quotient like residential buildings, because that doesn't make much sense... but hospital access definitely matters because people get ill/have accidents while at work too!
	- Maybe all inhabited buildings are considered for the overall "health coverage" score
	- Health factors at a person's workplace could influence their HQ, if we record consistent workplaces!

Fire:
- Fire risk calculated per tile, based on nearby active fires, coverage, funding, whether it has water, buildingDef fire-risk values, and ordinances.
- Water coverage affects fire risk
- Ordinances affect fire risk
- Small chance of a fire occurring each tick, depending on the risk.
	- I've just had an idea about this! Rather than a fire occurring meaning a fire disaster that's shown to the player, most fires are minor events that may not even be visible. (We could show a little animation maybe, but that's a world away.) Then, based on the fire service coverage, it has the chance to develop into a major fire, which is what you'd think of as a fire in simcity-likes. So rather than fire coverage just flat-out stopping fires from happening (which is weird magical nonsense) instead it's essentially fixing most fires quietly, and only if it gets out of control does it come to your attention.

Coverage:
- Calculate a coverage % for each service, based on what % of "inhabited" buildings have access to it and the quality of that access. This means somehow tagging buildings that count for this - perhaps we could count buildings with non-zero job/resident numbers?

Transport:
- Really not sure about this one right now. We need some way of simulating traffic, which means picking a place to start/end a trip, and then finding a path using a choice of transport method. For the path-finding, we could use an A* style algorithm, so that's not too hard, though we might want to cache the trips somehow - perhaps store sector-to-sector (well, sector-groups not sectors) path costs. We already have an old system for calculating connectivity.
	- SC4 gives residents a specific job which they always path to, until they can't or they change job (for whatever reason). That's extra data to track but keeps things fairly consistent over time. Occasionally we'd want to recalculate the path for a resident though - possibly all residents as I'm not sure if we could easily subtract their previous trip from the model.

Power:
- Brownouts: Partial power coverage to each building when demand is higher than supply. Display this visually.
	- Alternatively, cycle which buildings don't get power. Though, maybe a sector-by-sector basis is easier?

Terrain generation / modification!
- We need some kind of "generate a new map" button to start off.
	- SC3K lets you specify:
		- Map size (small/medium/large-type categories)
		- Whether each of the 4 map edges are ocean or land
		- Whether the centre is flat, a mountain, river(s) or lake(s)
		- How mountainous the land is
		- How many trees there are
		- How much of the map is water
	- Probably want to add a way to see/specify the seed with a random-seed (aka "regenerate") button
		-> (would this set the parameters too? maybe not but we want a way to easily duplicate maps)
	- Probably also want a "randomise" button that changes all the parameters along with the seed.
	- Could replace the "What's at the edges and what's at the centre" system with a set of generation algorithms... Things like "alpine" for mountainous with many trees, or "desert" or whatever. IDK. This is all just theory because we don't even have terrain height in yet! And probably won't for the first game, idk.
- "God mode" tools that let you tweak things before founding your city would be nice too.
	- Add/remove water
	- Change terrain type if we have that
	- Modify height if we have that
	- Add/remove trees
- This is all fairly limited right now because our world is a flat plane, but that's ok!

Statistics:
- Record statistics at regular intervals, so they can be graphed.
- Save and load them
- Graphs and charts!
	I quite like SC3K's style of having a single time graph that you can show/hide each stat on. It lets you compare things in a way that you can't in SC4. Though, how often do you actually *want* to compare unrelated things?
- Some way for layers (or mods) to register a statistic to track, and how to graph it
	SC4 lets you mod in graphs and overlays, but they have to replace an existing one.
	We'd like to avoid that and instead let you just add new ones.

Budget:
- Buildings have monthly upkeep, categorised by department
	- Each department has a funding % set by the player.
	- Building effects in a department are determined by the funding % when the last payment was made. (See note about avoiding exploits with ordinances, this is the same issue - the player shouldn't be able to set the funding to 0% just before the budget tick, and then back to 100% after, for free services!)
	- So, a fire station given 50% funding is half as effective at fire prevention within its radius.
		-> Maybe it should be non-linear, but that's more complicated! In SC4 for example, 100% funding is much more efficient than lower funding, and >100% funding only improves things a little.
- Taxes!
	- Player can set tax levels for different zones or spawn types, which influences both demand and general happiness (if we have that concept)
- Loans!
	- Can take out a limited number of loans, which are paid back over time.
- If you run out of money, it's bad in some way. We probably don't need a "you lose!" situation, just that you can only spend money that you actually have. Maybe if you have no money, (not $0, but some negative amount,) the game tries to get you to take out a loan, and if you don't can't, services are automatically dropped to 0% funding, so you quickly get big problems if you're unable to keep things in the black.

Debug system:
- Ability to filter out certain categories from the profiler list?
- Record start/end events, instead of just "amount of time taken", so that we can build an overall call stack and measure internal time, or see which paths to a function make it slow, etc.

------------------------------------------------

Things to work on next maybe:
- Maintain a graph of the power network, so we can recalculate a small portion when things change instead of rebuilding the whole thing
	- I think we already have enough information actually? PowerNetwork keeps a list of its Groups, and when we change a sector, only 3 things can happen: 1) nothing, 2) splitting a network into multiple parts, or 3) merging networks.
		Detecting 3) is easy - just see if all the boundaries of the group are the same network. If not, it's a merge!
		Detecting 2) is harder, not sure about that.
		Detecting 1) is just a case of realising neither 2 or 3 happened!
	- Related to this, we'd want to put networks in a structure that keeps their indices rather than rearranging them when adding/removing networks. (Because merging networks simply would involve moving all the groups from B into A, which would leave a gap at B's index.) I'm starting to want this structure more and more so I'd better implement it!
- Break the world into Sectors, each of which handles local information. (Power, path connectivity etc)
	- Took me WAY TOO LONG to find this: Tynan Sylvester's description of Rimworld's region system: https://www.youtube.com/watch?v=RMBQn_sg7DA
		- OK, so his works differently to how I remembered - regions are not a strict grid. They don't find their neighbours spatially, but by using a global hash of the (x, y, direction and length) of each edge.
		- Each region knows which connectivity group ("room") it is part of, by direct pointer to the Room struct.
		- Modifying a region just involves deleting it and rebuilding it, and possibly adjusting the connections of its neighbours.
		- When two rooms become connected, (determined by a new, no-region tile having different rooms in neighbouring regions,) it calculates which has fewer regions, and makes those part of the larger room. That means no global recalculation!
		- I guess there must be some global table of which regions are contained within each grid square, for finding them in those cases? IDK. I guess you could just query that information from the tiles.
	- Rimworld's is highly specialised for spatial navigation. In our case, our different things (roads, power, etc) would require separate regions for each one. Maybe that's OK?
		- Maybe a hybrid - world is broken down into regular-sized sectors, eg 16x16. (Maybe not 16x16 if we're using it for hash purposes! 15 or a prime number might be better then.) Each one contains some number of road regions, and power regions, etc. It also keeps some statistics, like how many jobs and residents are inside it. It knows which buildings are in it. It could even cache the sprites inside it, eg a single "mesh" for the terrain. It also has flags, eg "there are valid empty R zones", "contains industry", or "there's a fire", which would speed up searches for things. 
	- Other stuff we could put in sectors:
		- List of service buildings whose areas of effect cover part of this sector, by service type. (Health, fire, police etc)

BUG: We get frame hitching at almost regular intervals. Profiling says it's caused by renderBuffer() sometimes taking twice as long. Need to identify this!
	It's not just rendering code taking twice as long, it's some other seemingly random (but consistent) functions too. I really don't know why.
	Possibly it's updateInput() now? OK yeah it's SDL_PumpEvents() which takes ages sometimes because of polling joysticks. It's fixed for SDL 2.0.10 which isn't out yet. 2.0.10 is going to fix ALL my problems, apparently.

Problem: The new pixel-art shader is great, but the edges of coloured rectangles (and possibly textured ones though it's harder to tell?) still flicker because they're always full pixels. Ideally we'd be able to smooth those out too. Maybe just switch to MSAA to fix that if I can't find/figure-out a shader solution. (It seems like we can't determine from a shader whether a fragment is on the edge or not.)
	Maybe we could draw coloured rectangles by using a plain white texture with a 1px transparent border, then doing funky things with the UVs??? So that the edge of the polygon isn't coloured, and the visible edge is handled by the awesome shader. That could be cool.

------------------------------------------------

THE PLAN:

This project was way too directionless for too long, so we're now aiming for a city-building game along the lines of Simcity. Zone things, build roads and services, try and balance the budget, etc. 2D graphics, probably a square grid rather than isometric (at least to start with). 

------------------------------------------------

Zoning
- We need some kind of "RCI demand" source/calculation. Probably a simple one for now because we don't have anything to simulate really, but we need *something*.
	- A reasonable one would include: available jobs or workers, tax rate, average land value.
- Every so often, pump the "spawn buildings" function that places a number of zoned buildings within zones, to approximately match what is demanded.
- Spawning buildings looks for empty zones that match criteria like distance to roads, and prioritises highly-desirable places.
	- Eventually we'd probably want a more efficient way to find those zones. Maybe keep a list of empty zone coordinates and their land value, or something like that.
- Maximum size for drag rect
	Make this fairly large, so it's not inconvenient, but we do need *some* kind of limit because otherwise it'll get slower and slower.

Split the game code from the platform code
- Compile win32_main.cpp rather than main.cpp
- platform handles the renderer, input and memory.
- game has a single entry point function that's run once per frame.
- Related, we could do with more clearly separating the various systems, it's all a confusing, coupled, spaghetti mess right now.

ðŸ’¡ THINK: Is there some way of making the network graph (and similar) calculation work by making small changes instead of having to recompute the whole thing?
	- When recalculating the groups in a sector, do the "edge-of-sector border" checks, to find connected outside ones. We could detect network merges easily (a group is connected to other-sector groups with different networks) but splits are hard, I'm not sure how we could do that.
	- RESEARCH GRAPH THEORY STUFF!
		- An edge that will split the graph in two is called a "bridge". https://stackoverflow.com/questions/1566967/checking-if-removing-an-edge-in-a-graph-will-result-in-the-graph-splitting
		- Probably we want to store the graph itself, and track if a powergroup is a "bridge" as we go. That way, We know when we remove it that this has happened, and can rebuild only the networks that were connected to it. (Or maybe trigger a full rebuild, but at least we'd know that it's needed! If a powergroup isn't a bridge, we don't need to do anything, except update the connected powergroups so they know it was removed, and recalculate if they themselves are now bridges.)


Transport networks
- Actually check that people can get to work, and how bad the traffic is, etc
- Later we may want SC4-style subcategories like "lorry" and "bus" but for now we can just divide it into "road" and "rail". The thought is eventually we might record separate networks for road/rail but each one has a bitfield for subcategories... but really, that's massive overkill right now!

Building menus:
- Store in the BuildingCatalogue which menu a building is in, in a queryable way
- Useful tooltips that describe the building's function and stats

Audio!
- Probably use SoLoud, rather than SDL_mixer: http://sol.gfxile.net/soloud/

Asset system:
- Detect filesystem changes and reload the files that change
	- Includes being a bit smart about dependant files. eg if a building texture was used, but after the building defs reload, they no longer use that texture, it could be unloaded? But honestly, keeping it around is way simpler and our memory requirements are going to be tiny anyway.
	- If a file gets deleted, what happens?
- Replace sdl_image with our own loader so we can control where the memory comes from!
	- see https://github.com/spurious/SDL-mirror/blob/HEAD/src/stdlib/SDL_malloc.c
	- Looks like I need to update my version of SDL. Actually, worse than that, it was added AFTER 2.0.9 which is the current release version.
- Fancier memory management, if needed:
	- (We only need to worry about this if our asset memory usage gets high.
		If not, keep the current "load everything" system!)
	- Keep a memory limit, track the current size of all loaded assets.
	- If we cross the limit, evict the least-recently-used asset.
	- Track evictions so we can monitor it and see if it's misbehaving.
- Text assets compiled in some way so we don't need a string lookup?
	- https://blog.thimbleweedpark.com/text_lock
	- BETTER: https://ourmachinery.com/post/localization-in-the-machinerys-ui/
- Audio when we have that!
- Have a fallback font that's returned by getFont() if the name isn't recognised, rather than just failing to draw the text at all.
- Sprite Atlas:
	- Take individual sprite .png files and pack them together into a single texture.
	- Pad them with a 1px border equal to whatever the edge pixel of the sprite was.
	- Output the atlas info to a file.
	- Asset system reads the atlas and uses it to populate Sprite assets.
- Asset Packs: @AssetPacks
	- Assets can be grouped together into a "pack", and then we can specify to load a certain pack. This means not having to put all assets in memory at once.
	- At a basic level, we'd have a "preload" pack, which is loaded first, and provides what's needed to display a loading screen.
	- This could then be used for assets tied to a specific game level, if we *have* levels, or similar things like if you can have cities in different regions or planets with different terrain art, etc.
	- If we're going to evict assets at the end of a level though, we'd need to track which assets are associated with each pack - and some assets could be in multiple ones, potentially. Unless we make it a requirement that each asset only goes in one pack somehow? IDK.
	- A pack would probably just be defined in a text file. Lines of `type shortname.blah`
	- Asset packer of some kind to generate the file

Water:
- Pumps produce water
	- They only do this if they have power... that's a little complicated.
	- Pump efficiency is based on distance to water. Closer = better.
- Buildings consume water
- Separate map for water pipes! Oh my.
	- I guess this can be a "tileHasPipe" thing in WaterLayer?
	- Concept of "underground view" that renders the city differently
		- Dirt terrain
		- Either no buildings rendered, or we render them faintly - we need to be able to see where stuff is, but it shouldn't obstruct the view of the underground stuff.
		- Demolition also needs to act differently... oh my. I guess the City's demolish functions need to know which view is active, and then pass over to demolishWaterRect() or whatever. That's actually not that complicated.
- Pipes transfer water
- Connectivity similar to power, but different
	- Only pipes carry water, and emit it X tiles away. There's no gap-jumping like power has.
- Pollution? Ideally, we'd have it so that if a pump is in a polluted area, it has a negative effect on health at any buildings that receive its water. Not sure how to track that though.
	- Maybe, track the highest pump-pollution level within each network, and use that.

Better profiling
- If we record start/end events instead of just execution-durations, then we can reconstruct the stack. That would let us see which function CALLS are taking the most time, instead of just "function X takes a while".
- Maybe put the analysis system on a separate thread so that it doesn't disturb the game so much?

String HashTable!
- MeowHash???
- Maybe MurmurHash? https://en.wikipedia.org/wiki/MurmurHash
- Other hashes: http://www.cse.yorku.ca/~oz/hash.html

Console:
- Console eats all input events while it is open?
- Automatic parameter type checking? That might be crazy though.

Return false for isKeyPressed() etc, when the key is a printable character and we have a text input active?

Unicode stuff:
- 2-stage table for properties, will save space! Not sure if I need that, but thought it was sensible to put the link here in case I do. https://www.strchr.com/multi-stage_tables
- Check text is valid utf8 as it enters the program (so, when user enters it, or we read it from a file.)
	- Could maybe convert it to utf32 while we're at it? Would save time on lookups...

BUGS:
- Unloading Fraps does something funny with our Window reference, causing a crash.

FULLSCREEN!
- It's weird and buggy right now. Probably want to do the FULLSCREEN_DESKTOP flag, with special case code to make it centred on the screen and make sure input works.


---------------------------------------------
NOTES:
---------------------------------------------

Simcity Classic features:
(Can play it online at http://micropolis.mostka.com/ )
	Code at https://github.com/simhacker/micropolis
	A decent guide to how it works at https://github.com/SimHacker/micropolis/blob/wiki/InsideTheSimulator.md
	If we want to rip sprites from it, a good folder of PNGs is https://github.com/jason17055/micropolis-java/tree/master/graphics
R/C/I
	Zones! You plop a square down, but then it can be built in sections.
		I think I'll do drag-rect zones instead
	Demand! Formula is probably very simple
Demolish
Forest
Water
Roads
	Roads are placed by dragging a line, then release to place it all.
Fire/Police department buildings and coverage
	(seems to affect a plus-shap covering 5 8x8 tile chunks.)
Power stations and power lines
	Power lines need to exist "on top" of roads. How do we handle this? Maybe a building that's both, and we special-case place it when the player tries to place one on top of the other.
Water, bridges
Fires
Rails
Disasters?
	Flooding
Budget (control tax rate, transport/fire/police funding)
Query tool
Data views:
	Land value
	Crime
	Fire
	Pollution
	Traffic density
	Power connectivity
	Fire coverage
	Police coverage
Pause/resume/speed controls
Map generator

Notes:
Simcity 4 map sizes: 64x64 (~1km), 128x128 (~2km), 256x256 (~4km)
(Simcity 3000 map size info is harder to find, but apparently the largest is also 256x256 tiles)

SC3K does indeed model individual power networks, not just "is it connected to a power station" and "is the total of consumption < total production".

SC3K notes:
	https://simpage.net/simcity3/tips.shtml
	http://www.sc3000.com/knowledge/index.cfm
	How zones develop: http://www.sc3000.com/knowledge/showarticle.cfm?id=1278&openItemID=

-------------------------------------------------

BUILD:

For future reference, here's the build system config (which I'm no longer using) for sublime text 3:
{
	"shell_cmd": "build.bat",
	"working_dir": "${file_path}",
	"file_regex": "^(...*?)[(]([0-9]*)[)]",
	"shell": true,
	"encoding": "gb2312"
}
Took me WAY TOO LONG to make that work.
