------------------------------------------------
TODO: https://trello.com/b/0Z1oVdg9/under-london
------------------------------------------------
I don't know whether I prefer keeping the list here or on Trello.
Trello is nice, but it's ALL THE WAY OVER THERE in a different program! (Which requires my internet to work...)

Handy emojis: âœ” âœ– â„¢ ðŸ’¡

Notes for searching:
	@Speed - Thing could be faster
	@Size - Thing could use less memory
	@Copypasta - Copy-pasted code, should probably be factored together
	@Cleanup - Stuff that needs investigating/organising, when it's convenient
	@Hack - Hacks

------------------------------------------------

Add newline support to .text files!

Palette assets
	Range palette, when we have a min/max and want to interpolate in X steps
	Fixed palette, eg the powered/brownout/blackout colours

Make drawGrid() use the grid and palette as Textures, and do a single draw call. That way we don't need to do copyRegion() fiddling - we could even keep the current data layer texture cached on the GPU if we're smart?

Land value builidng-effect calculation is super slow.

DirtyRects:
- Check for the dirty-rects list becoming too big, because that's probably a bug, like before!
- It's a good system, but I think we need to break it down more. Different parts of a layer have different ideas of how much the incoming rects should be expanded, or what makes an area dirty at all. I set up the City::markAreaDirty() function because I'm concerned about bugs coming from forgetting to tell a layer that something has changed, in some situations... but that's a one-size-fits-all approach that's less optimal. eg, Power only cares if the tiles changed whether they carry power or not (or how much power is produced/consumed).
- We could add flags to markAreaDirty() that say which properties have changed, but that sounds like it'd have the same problems of forgetting to update something. It also means each system that alters the map has to know how all of the layers function to know which ones need updating - which is a pretty horrible idea.
- Maybe markAreaDirty() does checks to see which things need updating, but how would it know?
- OK here's a good example of the problems: Pollution affects land value, but pollution doesn't mark any areas as dirty, because that would be the whole map every time, and that's no good. So, the land value doesn't update, until something *else* marks the area as dirty.
	- Perhaps we want to split updates into two parts:
	1) Dirty areas where the world physically changed, updated on demand.
	2) Things that are recalculated for the whole city every so often, regularly and automatically.

- Zones
	- Desirability per zone type
		- (later, make this per *spawn* type, which is more specific)
		- Desirability is used to prioritise new developments
			- Sectors store some kind of aggregate desirability score, either average or the max tile value
			- ZoneLayer keeps a sorted list of desirable sectors, per zone type?
			- Buildings are grown in the most desirable place within a sector first
		- Desirability for a tile is affected by if it's already got a building there, and how recently it was constructed. (Will need to record building construction time somehow! And have a game clock.)
			- So, the how-good-a-place-is weight is "desirability - penalty"
	- @RandomIterate: The random selection in findGrowableBuildingDef() is biased, making options that appear after invalid ones more likely to be chosen. This is bad, but I'm not sure how growing is going to happen in the end - the current "grow one at a time" method might be replaced with a "grow a block at a time" one, where the code would be quite different.
	- @RandomIterate: Picking a random x,y within a sector to start with is also biased! But, we'll replace it with a prioritised system outlined above, so this will get fixed.
- Statistics
	- Jobs
	- Population
- Data
	- Land value
	- Pollution
	- Fire
	- Crime
	- Fire coverage
	- Police coverage
	- Traffic density

Pollution:
- Eventually we probably want it to build up and change over time:
	- Buildings add or remove an amount from their tiles.
	- Tile values are blended somehow, so that pollution spreads out, and fades slightly.
	- (This means that a big plume of smog doesn't pop in or out of existence if a factory is built or demolished.)
- Transport also creates pollution, depending on type and volume. (And any clean-car-incentive type ordinance effects.)

Fire:
- Building-coverage, using max(), with only one class because I can't think of a reason why different fire buildings would affect differently. (Apart from varying area-of-effect radius and values)
- Fire risk calculated per tile, based on nearby active fires, coverage, funding, whether it has water, and ordinances.
- Keep a list of fire-service buildings so they can be iterated more easily.
- Small chance of a fire occurring each tick, depending on the risk.

Crime:
- Building-coverage, which is additive, with only one class.
- A global prisoner count/capacity.
- Crime risk per tile, used internally.
- A per-tile value for "how much" crime there is in that area. It should be a fairly long-term thing, so a single crime downtown doesn't destroy desirability, but if crimes happen there on a regular basis, people don't want to be there.
	- Possibly, a crime occurring splats an area-of-effect over a wide-ish area, and all tiles gradually tick down over time.
- I think we want to use a SC4-style model:
	- Various factors contribute to a population of criminals.
		- eg: unemployment
	- Each tick, each criminal may commit a crime.
	- Crimes are more likely to occur in wealthy areas, and places with lower police presence.
	- The criminal then has a chance of being caught, based on the police presence and budget etc.
	- They're then moved from the criminal population to the prisoner population.
	- When a prisoner completes their sentence, they may or may not return to the criminal population, depending on various factors.
		- eg: reform programs, prison conditions, overall police presence in city.
- Model severity of crimes too, somehow? I know SC4 does that but I don't really understand it too well. Obviously more severe crimes have a bigger impact - a murder is much worse than petty theft.
	- Maybe, criminals even have a "severity" level, and over time without being caught, that level increases. The higher the level, the more severe the crimes they can commit, with a randomness factor.
- I think I'm over-thinking crime right now. If the calculations are fairly simple, we definitely could do individual simulations of the criminals, similar to a particle system, but I'm not sure. Just throwing ideas out there!

Education/Health:
- A building-coverage grid for each class of building. (eg primary school, secondary school, college, university, library, museum; or clinic, hospital)
	- I think the coverage value for each tile wants to be the max of contributing buildings, rather than just adding their effects. eg, living between two hospitals is not going to make your health twice as good as living next to only one! You either have good hospital coverage or you don't.
- Keep a list of health/education service buildings for easier iteration.
- Actual education/health quotient per tile is set to a base value when someone moves in, and then gradually changes over time based on the coverage of each building class, funding, and other factors.
	- Health depends on clinic/hospital coverage, pollution, and possibly ordinances if we ever implement those.
	- Education is more complicated because different classes are supposed to cater to different age ranges. I don't know if we want to simulate age or not? If we don't, we'd still want the different classes to have different effects, so that you can't get perfect education by spamming libraries, for example.
- As a side-note, I'm thinking com/ind should also require hospital coverage, not just res... but I'm not sure how that would work. People get sick/have accidents all the time, not just when they're at home! Especially with heavy industry.

Transport:
- Really not sure about this one right now. We need some way of simulating traffic, which means picking a place to start/end a trip, and then finding a path using a choice of transport method. For the path-finding, we could use an A* style algorithm, so that's not too hard, though we might want to cache the trips somehow - perhaps store sector-to-sector (well, sector-groups not sectors) path costs. We already have an old system for calculating connectivity.
	- SC4 gives residents a specific job which they always path to, until they can't or they change job (for whatever reason). That's extra data to track but keeps things fairly consistent over time. Occasionally we'd want to recalculate the path for a resident though - possibly all residents as I'm not sure if we could easily subtract their previous trip from the model.

Ordinances!
- Global effects that you can choose to enable or disable
	- To avoid exploits, they'd need to only come into effect once paid for. eg, when you turn one on, nothing happens until the next budget happens, and then the ordinance is in effect until the following budget. Otherwise you could disable them just before the budget and then re-enable them afterwards, to get them for free! (Or vice-versa with ones that earn money: enable them only for the budget, and avoid the negative effects the rest of the time.)
	- These should DEFINITELY be data!
		- An income/cost calculation
		- A list of (thing affected, how much)
		- Name and description (Both are keys for the locale-specific text)

Tidy up the types/maths files, so that I can ACTUALLY FIND THINGS.
- Maybe color/v4 should be separate types?
- I'm sure I can think of other things too!

Debug system:
- Ability to filter out certain categories from the profiler list?

------------------------------------------------

Things to work on next maybe:
- Maintain a graph of the power network, so we can recalculate a small portion when things change instead of rebuilding the whole thing
	- I think we already have enough information actually? PowerNetwork keeps a list of its Groups, and when we change a sector, only 3 things can happen: 1) nothing, 2) splitting a network into multiple parts, or 3) merging networks.
		Detecting 3) is easy - just see if all the boundaries of the group are the same network. If not, it's a merge!
		Detecting 2) is harder, not sure about that.
		Detecting 1) is just a case of realising neither 2 or 3 happened!
	- Related to this, we'd want to put networks in a structure that keeps their indices rather than rearranging them when adding/removing networks. (Because merging networks simply would involve moving all the groups from B into A, which would leave a gap at B's index.) I'm starting to want this structure more and more so I'd better implement it!
- Break the world into Sectors, each of which handles local information. (Power, path connectivity etc)
	- Took me WAY TOO LONG to find this: Tynan Sylvester's description of Rimworld's region system: https://www.youtube.com/watch?v=RMBQn_sg7DA
		- OK, so his works differently to how I remembered - regions are not a strict grid. They don't find their neighbours spatially, but by using a global hash of the (x, y, direction and length) of each edge.
		- Each region knows which connectivity group ("room") it is part of, by direct pointer to the Room struct.
		- Modifying a region just involves deleting it and rebuilding it, and possibly adjusting the connections of its neighbours.
		- When two rooms become connected, (determined by a new, no-region tile having different rooms in neighbouring regions,) it calculates which has fewer regions, and makes those part of the larger room. That means no global recalculation!
		- I guess there must be some global table of which regions are contained within each grid square, for finding them in those cases? IDK. I guess you could just query that information from the tiles.
	- Rimworld's is highly specialised for spatial navigation. In our case, our different things (roads, power, etc) would require separate regions for each one. Maybe that's OK?
		- Maybe a hybrid - world is broken down into regular-sized sectors, eg 16x16. (Maybe not 16x16 if we're using it for hash purposes! 15 or a prime number might be better then.) Each one contains some number of road regions, and power regions, etc. It also keeps some statistics, like how many jobs and residents are inside it. It knows which buildings are in it. It could even cache the sprites inside it, eg a single "mesh" for the terrain. It also has flags, eg "there are valid empty R zones", "contains industry", or "there's a fire", which would speed up searches for things. 
	- Other stuff we could put in sectors:
		- List of service buildings whose areas of effect cover part of this sector, by service type. (Health, fire, police etc)

BUG: We get frame hitching at almost regular intervals. Profiling says it's caused by renderBuffer() sometimes taking twice as long. Need to identify this!
	It's not just rendering code taking twice as long, it's some other seemingly random (but consistent) functions too. I really don't know why.
	Possibly it's updateInput() now? OK yeah it's SDL_PumpEvents() which takes ages sometimes because of polling joysticks. It's fixed for SDL 2.0.10 which isn't out yet. 2.0.10 is going to fix ALL my problems, apparently.

Problem: The new pixel-art shader is great, but the edges of coloured rectangles (and possibly textured ones though it's harder to tell?) still flicker because they're always full pixels. Ideally we'd be able to smooth those out too. Maybe just switch to MSAA to fix that if I can't find/figure-out a shader solution. (It seems like we can't determine from a shader whether a fragment is on the edge or not.)
	Maybe we could draw coloured rectangles by using a plain white texture with a 1px transparent border, then doing funky things with the UVs??? So that the edge of the polygon isn't coloured, and the visible edge is handled by the awesome shader. That could be cool.

------------------------------------------------

THE PLAN:

This project was way too directionless for too long, so we're now aiming for a city-building game along the lines of Simcity. Zone things, build roads and services, try and balance the budget, etc. 2D graphics, probably a square grid rather than isometric (at least to start with). 

------------------------------------------------

Zoning
- We need some kind of "RCI demand" source/calculation. Probably a simple one for now because we don't have anything to simulate really, but we need *something*.
	- A reasonable one would include: available jobs or workers, tax rate, average land value.
- Every so often, pump the "spawn buildings" function that places a number of zoned buildings within zones, to approximately match what is demanded.
- Spawning buildings looks for empty zones that match criteria like distance to roads, and prioritises highly-desirable places.
	- Eventually we'd probably want a more efficient way to find those zones. Maybe keep a list of empty zone coordinates and their land value, or something like that.
- Maximum size for drag rect
	Make this fairly large, so it's not inconvenient, but we do need *some* kind of limit because otherwise it'll get slower and slower.

Split the game code from the platform code
- Compile win32_main.cpp rather than main.cpp
- platform handles the renderer, input and memory.
- game has a single entry point function that's run once per frame.
- Related, we could do with more clearly separating the various systems, it's all a confusing, coupled, spaghetti mess right now.

ðŸ’¡ THINK: Is there some way of making the network graph (and similar) calculation work by making small changes instead of having to recompute the whole thing?
	- When recalculating the groups in a sector, do the "edge-of-sector border" checks, to find connected outside ones. We could detect network merges easily (a group is connected to other-sector groups with different networks) but splits are hard, I'm not sure how we could do that.
	- RESEARCH GRAPH THEORY STUFF!
		- An edge that will split the graph in two is called a "bridge". https://stackoverflow.com/questions/1566967/checking-if-removing-an-edge-in-a-graph-will-result-in-the-graph-splitting
		- Probably we want to store the graph itself, and track if a powergroup is a "bridge" as we go. That way, We know when we remove it that this has happened, and can rebuild only the networks that were connected to it. (Or maybe trigger a full rebuild, but at least we'd know that it's needed! If a powergroup isn't a bridge, we don't need to do anything, except update the connected powergroups so they know it was removed, and recalculate if they themselves are now bridges.)


Transport networks
- Actually check that people can get to work, and how bad the traffic is, etc
- Later we may want SC4-style subcategories like "lorry" and "bus" but for now we can just divide it into "road" and "rail". The thought is eventually we might record separate networks for road/rail but each one has a bitfield for subcategories... but really, that's massive overkill right now!

GUI
- Convert Toasts (nÃ©e UI-Messages) to use windows too
	- This is somewhat more involved....
	- Multiple toasts can exist at once. I'm thinking each new one pushes all the previous ones up.
	- After an amount of time, they fade out.
	- So, probably keep Toasts in a separate array to Windows, because they work in a special way. Still use the WindowProc/Context stuff for convenience, but don't deal with them in updateAndRenderWindows(). So, also no need for a special WinFlag!
	- Remove UIMessage styles

Building menus:
- Store in the BuildingCatalogue which menu a building is in, in a queryable way
- Useful tooltips that describe the building's function and stats

Audio!
- Probably use SoLoud, rather than SDL_mixer: http://sol.gfxile.net/soloud/

Asset system:
- Ability to reload an individual file
- Detect filesystem changes and reload the files that change
	- Includes being a bit smart about dependant files. eg if a building texture was used, but after the building defs reload, they no longer use that texture, it could be unloaded? But honestly, keeping it around is way simpler and our memory requirements are going to be tiny anyway.
	- If a file gets deleted, what happens?
- There's a 96-byte memory leak when we reload the assets, and I'm not sure why.
- Replace sdl_image with our own loader so we can control where the memory comes from!
	- see https://github.com/spurious/SDL-mirror/blob/HEAD/src/stdlib/SDL_malloc.c
	- Looks like I need to update my version of SDL. Actually, worse than that, it was added AFTER 2.0.9 which is the current release version.
- Fancier memory management, if needed:
	- (We only need to worry about this if our asset memory usage gets high.
		If not, keep the current "load everything" system!)
	- reload asset, just free() then malloc() again!
		- Optimisation: Don't reallocate if it's the exact same size.
	- Keep a memory limit, track the current size of all loaded assets.
	- If we cross the limit, evict the least-recently-used asset.
	- Track evictions so we can monitor it and see if it's misbehaving.
- Asset packer of some kind. Maybe just creates an assets table?
- Text assets compiled in some way so we don't need a string lookup?
	- https://blog.thimbleweedpark.com/text_lock
	- BETTER: https://ourmachinery.com/post/localization-in-the-machinerys-ui/
- Audio when we have that!
- Sprite Atlas:
	- Take individual sprite .png files and pack them together into a single texture.
	- Pad them with a 1px border equal to whatever the edge pixel of the sprite was.
	- Output the atlas info to a file.
	- Asset system reads the atlas and uses it to populate Sprite assets.
- Asset Packs:
	- Assets can be grouped together into a "pack", and then we can specify to load a certain pack. This means not having to put all assets in memory at once.
	- At a basic level, we'd have a "preload" pack, which is loaded first, and provides what's needed to display a loading screen.
	- This could then be used for assets tied to a specific game level, if we *have* levels, or similar things like if you can have cities in different regions or planets with different terrain art, etc.
	- If we're going to evict assets at the end of a level though, we'd need to track which assets are associated with each pack - and some assets could be in multiple ones, potentially. Unless we make it a requirement that each asset only goes in one pack somehow? IDK.
	- A pack would probably just be defined in a text file. Lines of `type shortname.blah`

Better profiling
- If we record start/end events instead of just execution-durations, then we can reconstruct the stack. That would let us see which function CALLS are taking the most time, instead of just "function X takes a while".
- Maybe put the analysis system on a separate thread so that it doesn't disturb the game so much?

String HashTable!
- MeowHash???
- Maybe MurmurHash? https://en.wikipedia.org/wiki/MurmurHash
- Other hashes: http://www.cse.yorku.ca/~oz/hash.html

Console:
- Console eats all input events while it is open?
- Automatic parameter type checking? That might be crazy though.

Return false for isKeyPressed() etc, when the key is a printable character and we have a text input active?

Unicode stuff:
- 2-stage table for properties, will save space! Not sure if I need that, but thought it was sensible to put the link here in case I do. https://www.strchr.com/multi-stage_tables
- Check text is valid utf8 as it enters the program (so, when user enters it, or we read it from a file.)
	- Could maybe convert it to utf32 while we're at it? Would save time on lookups...

BUGS:
- Unloading Fraps does something funny with our Window reference, causing a crash.

FULLSCREEN!
- It's weird and buggy right now. Probably want to do the FULLSCREEN_DESKTOP flag, with special case code to make it centred on the screen and make sure input works.


---------------------------------------------
NOTES:
---------------------------------------------

Simcity Classic features:
(Can play it online at http://micropolis.mostka.com/ )
	Code at https://github.com/simhacker/micropolis
	A decent guide to how it works at https://github.com/SimHacker/micropolis/blob/wiki/InsideTheSimulator.md
	If we want to rip sprites from it, a good folder of PNGs is https://github.com/jason17055/micropolis-java/tree/master/graphics
R/C/I
	Zones! You plop a square down, but then it can be built in sections.
		I think I'll do drag-rect zones instead
	Demand! Formula is probably very simple
Demolish
Forest
Water
Roads
	Roads are placed by dragging a line, then release to place it all.
Fire/Police department buildings and coverage
	(seems to affect a plus-shap covering 5 8x8 tile chunks.)
Power stations and power lines
	Power lines need to exist "on top" of roads. How do we handle this? Maybe a building that's both, and we special-case place it when the player tries to place one on top of the other.
Water, bridges
Fires
Rails
Disasters?
	Flooding
Budget (control tax rate, transport/fire/police funding)
Query tool
Data views:
	Land value
	Crime
	Fire
	Pollution
	Traffic density
	Power connectivity
	Fire coverage
	Police coverage
Pause/resume/speed controls
Map generator

Notes:
Simcity 4 map sizes: 64x64 (~1km), 128x128 (~2km), 256x256 (~4km)
(Simcity 3000 map size info is harder to find, but apparently the largest is also 256x256 tiles)

SC3K does indeed model individual power networks, not just "is it connected to a power station" and "is the total of consumption < total production".

SC3K notes:
	https://simpage.net/simcity3/tips.shtml
	http://www.sc3000.com/knowledge/index.cfm

-------------------------------------------------

BUILD:

For future reference, here's the build system config (which I'm no longer using) for sublime text 3:
{
	"shell_cmd": "build.bat",
	"working_dir": "${file_path}",
	"file_regex": "^(...*?)[(]([0-9]*)[)]",
	"shell": true,
	"encoding": "gb2312"
}
Took me WAY TOO LONG to make that work.
