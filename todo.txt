------------------------------------------------
TODO: https://trello.com/b/0Z1oVdg9/under-london
------------------------------------------------
I don't know whether I prefer keeping the list here or on Trello.
Trello is nice, but it's ALL THE WAY OVER THERE in a different program! (Which requires my internet to work...)

Custom log function, that wraps the sdl one and also sends things to the in-game console
- Serach for SDL_Log in code

Go through shader handling code
- FIXME: SDL_Log and related functions don't accept %.*s format strings that provide a string length!
	Replace them with myprintf() in a wrapper.
- Use proper Strings in shader loading.
- more helpful shader error messages
- May want to copy HMH in loading shaders as multiple strings, with one being a set of definitions and helper functions.
- print temporary gl logs to the global temp arena rather than creating temporarymemory.
- general cleanup, I see a bunch of commented out code and some apparently now-invalid comments.

Technique to look into: X macros https://github.com/HandmadeHero/cpp/issues/42
Why doesn't the asset system loading stuff appear in the console initially?

Console:
- Use new token code for console commands too? Can't do this easily because we rely on splitting the string to get the arg count!

UI styles loaded from a file
- Try and make sure it will handle utf8 encoding. I think handling the file byte by byte actually will work fine, but it's hard to be certain without thinking properly about it and testing it!
- We'll need a string-to-float routine at some point! Not written one yet. Maybe use atof/strtof if I'm lazy.

Asset system:
- Memory management:
	- Do a malloc/free for each asset that's loaded
	- reload asset, just free() then malloc() again!
		- Optimisation: Don't reallocate if it's the exact same size.
	- Keep a memory limit, track the current size of all loaded assets.
	- If we cross the limit, evict the least-recently-used asset.
	- At the end of a level, we can also evict all level-specific assets if we want?
	- Track evictions so we can monitor it and see if it's misbehaving.
- Automatic file-reloading. https://msdn.microsoft.com/en-us/library/windows/desktop/aa365465(v=vs.85).aspx
- Asset packer of some kind. Maybe just creates an assets table?
- Load ui theme from a file
- Load texture region information from a file
- Strings! Translateable and stored as assets.
	- https://blog.thimbleweedpark.com/text_lock
- Audio when we have that!

String HashTable!
- Maybe MurmurHash? https://en.wikipedia.org/wiki/MurmurHash
- Other hashes: http://www.cse.yorku.ca/~oz/hash.html

Console:
- Why does typing a space not move the caret far enough? I must be measuring the wrong thing.
	- OK, it's because we want the xAdvance but don't have it by that point. yay
- Console eats all input events while it is open?
- Automatic parameter type checking? That might be crazy though.
- Better input
	- Up to copy previous command

Return false for isKeyPressed() etc, when the key is a printable character and we have a text input active?

Strings:
- Use String everywhere, rather than char*.
- get rid of strncpy()
- translation! getString("string_id") return the localised string.
	- Read strings from a compiled file. (.mo? https://www.gnu.org/software/gettext/manual/html_node/MO-Files.html)
	- Managed by assets system
	- Reload correctly
	- Can switch language at runtime

Arenas:
- Figure out how to prevent non-temp allocations happening when temp mem is open.

UI Theme:
- Rather than always doing getFont() etc, maybe cache a font ref from the assets system and then
  reload it when the assets change.
- Could move the UITheme into UIState, again getting it from the assets system once then refreshing
  when it's reloaded. Would save passing the assets system to everywhere in the UI code.
- What is it?!?!
	- All the information about how to draw the UI.
	- So, font/colour/padding etc for a button, or a menu item.
	- Do we want styles within this? So you say "this is a 'fancy' button, this is a 'normal' button"?
	- If we want to go crazy we could define the UI itself in data. But that sounds awkward and unnecessary.
		- Though I think I want to do that for the fancy text screens, as planned.
		  (Victiorian typography, lots of different fonts and sizes and styles.)

GAME:
- Menu / Game are separate code.
- Draw a map
- Draw a grid over it
- Create pipes
- They link

BUGS:
- Unloading Fraps does something funny with our Window reference, causing a crash.
- We get random hitching about once per second. Seems to be SDL_GL_SwapWindow() causing it?

Rendering 2.0:
- Stop passing a size to drawSprite()! Will always draw at a consistent size.
- At some point, need to distinguish between "flat" sprites (e.g. field)  and "tall" ones (e.g. barn, farmhouse, farmer).
- Draw things with an offset, defined per-texture-region(?)
- Flash funds label when it changes
- Probably replace the binary search for glyphs with something better?
- Handle cursors ourselves? Not sure about latency.

Asset packing:
- Pack asset PNGs into a set of standard-sized ones, with 1 px of padding around them
	for the bilinear filtering
- Store TextureRegion information in a little binary file
- Read data from these rather than hard-coded filenames


ENGINE:
- Audio!
	- Sound effects
	- Pitch shifting
	- Music
- An actual random number generator!
- Temporary memory automatically closes when it leaves scope?
- Scenarios
	- A background image, a size, etc.

---------------------------------------------
NOTES:
---------------------------------------------

BUILD:

For future reference, here's the build system config for sublime text 3:
{
	"shell_cmd": "build.bat",
	"working_dir": "${file_path}",
	"file_regex": "^(...*?)[(]([0-9]*)[)]",
	"shell": true,
	"encoding": "gb2312"
}
Took me WAY TOO LONG to make that work.