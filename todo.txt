------------------------------------------------
TODO: https://trello.com/b/0Z1oVdg9/under-london
------------------------------------------------
I don't know whether I prefer keeping the list here or on Trello.
Trello is nice, but it's ALL THE WAY OVER THERE in a different program! (Which requires my internet to work...)

Handy emojis:
✔
✖

------------------------------------------------

Things to work on next maybe:
- Power stations and connectivity and consumption?
- Make assets reload automatically?
- Zones actually spawn stuff
- Rather than directly recalculating power/pathing when we make a change, mark them as "dirty" and then recalculate at an appropriate moment.

Data structure ideas I had late last night:
- Buildings array:
	Slots store whether they're empty or full. (Bitfield in the array chunk?)

    When removing one, just mark that slot empty.

    This way, building IDs (or anything else using that array type's indices) are constant. No need to update the id-by-tile array, or later, any other systems that might refer to a building. (Impressionable style walkers need an origin building, or SimCity citizens need a home and a workplace.) Also, this is necessary for inspection windows!

    Inserting into the array would require some walking, but we can keep track of the "earliest free slot index", which should reduce that a lot. (When you fill the slot, walk until you find another free one. When freeing a slot, if it's earlier than the current earliest index, replace that index.)

    I mean, maybe we want a different data structure than what I've described, but still, constant IDs are a must!

    Also probably want to consider what structure best suits other cases too, rather than just using Array always. Eg, ring buffers might be good sometimes.
- Console text buffer:
	Also, the console texts can be in a ring buffer! Store it as (line metadata, string data). When adding a line, see if there's room. While there's not, "free" the earliest by jumping ahead to the next one. As long as we don't try and enter a line larger than the buffer, it's fine. (We can just crop it.) Also, think what happens if the buffer becomes empty. (Jump to index 0?)


Arrays stuff
- "markFirstChunkAsFull" is a hack, try to replace it.
- Try to remove all "dynamic" uses of Array<>, because it's bad. Replace with ChunkedArray for now.
- Main issue is, how do we sort ChunkedArrays?
	- I guess the best idea would be to take advantage of the chunks rather than letting them be a weakness. Maybe some variation on a Merge Sort? (Sort the items within each chunk, then combine them by walking the chunks simultaneously.) Though, that gets compilcated because of the variable (and possibly very large) number of chunks, and because we'd need an extra set of chunks to put the results in. (Could use temp memory, maybe that's OK?)

BUG: We get frame hitching at almost regular intervals. Profiling says it's caused by renderBuffer() sometimes taking twice as long. Need to identify this!
	UPDATE: Determined that the debug system itself gets messed up in some situations and loses the "top code blocks" results. This is unhelpful.

Problem: The new pixel-art shader is great, but the edges of coloured rectangles (and possibly textured ones though it's harder to tell?) still flicker because they're always full pixels. Ideally we'd be able to smooth those out too. Maybe just switch to MSAA to fix that if I can't find/figure-out a shader solution. (It seems like we can't determine from a shader whether a fragment is on the edge or not.)

------------------------------------------------

THE PLAN:

This project was way too directionless for too long, so we're now aiming for a city-building game along the lines of Simcity. Zone things, build roads and services, try and balance the budget, etc. 2D graphics, probably a square grid rather than isometric (at least to start with). 

------------------------------------------------

Simcity Classic features:
(Can play it online at http://micropolis.mostka.com/ )
	Code at https://github.com/simhacker/micropolis
	A decent guide to how it works at https://github.com/SimHacker/micropolis/blob/wiki/InsideTheSimulator.md
	If we want to rip sprites from it, a good folder of PNGs is https://github.com/jason17055/micropolis-java/tree/master/graphics
R/C/I
	Zones! You plop a square down, but then it can be built in sections.
		I think I'll do drag-rect zones instead
	Demand! Formula is probably very simple
Demolish
Forest
Water
Roads
	Roads are placed by dragging a line, then release to place it all.
Fire/Police department buildings and coverage
	(seems to affect a plus-shap covering 5 8x8 tile chunks.)
Power stations and power lines
	Power lines need to exist "on top" of roads. How do we handle this? Maybe a building that's both, and we special-case place it when the player tries to place one on top of the other.
Water, bridges
Fires
Rails
Disasters?
	Flooding
Budget (control tax rate, transport/fire/police funding)
Query tool
Data views:
	Land value
	Crime
	Fire
	Pollution
	Traffic density
	Power connectivity
	Fire coverage
	Police coverage
Pause/resume/speed controls
Map generator

Notes:
Simcity 4 map sizes: 64x64 (~1km), 128x128 (~2km), 256x256 (~4km)

-------------------------------------------------

Zoning
- We need some kind of "RCI demand" source/calculation. Probably a simple one for now because we don't have anything to simulate really, but we need *something*.
	- A reasonable one would include: available jobs or workers, tax rate, average land value.
- Every so often, pump the "spawn buildings" function that places a number of zoned buildings within zones, to approximately match what is demanded.
- Spawning buildings looks for empty zones that match criteria like distance to roads, and prioritises highly-desirable places.
	- Eventually we'd probably want a more efficient way to find those zones. Maybe keep a list of empty zone coordinates and their land value, or something like that.

Split the game code from the platform code
- Compile win32_main.cpp rather than main.cpp
- platform handles the renderer, input and memory.
- game has a single entry point function that's run once per frame.

GUI
- BUG: Text alignment doesn't work when the text wraps onto multiple lines! Each line should align itself horizontally. (So, a multi-line wrapped text with ALIGN_H_CENTRE should have each line centred!)
- Richer tooltips. Not as fancy as our window-proc stuff, but allow creating a tooltip by adding individual labels (or maybe images too eventually) each of which is styled individually. Actually maybe it should use the same system as windows!

UI styles loaded from a file
- Try and make sure it will handle utf8 encoding. I think handling the file byte by byte actually will work fine, but it's hard to be certain without thinking properly about it and testing it!
- We'll need a string-to-float routine at some point! Not written one yet. Maybe use atof/strtof if I'm lazy.

Audio!
- Probably use SoLoud, rather than SDL_mixer: http://sol.gfxile.net/soloud/

Asset system:
- Replace sdl_image with our own loader so we can control where the memory comes from!
	- see https://github.com/spurious/SDL-mirror/blob/HEAD/src/stdlib/SDL_malloc.c
	- Looks like I need to update my version of SDL. Actually, worse than that, it was added AFTER 2.0.9 which is the current release version.
- Fancier memory management, if needed:
	- (We only need to worry about this if our asset memory usage gets high.
		If not, keep the current "load everything" system!)
	- Do a malloc/free for each asset that's loaded
	- reload asset, just free() then malloc() again!
		- Optimisation: Don't reallocate if it's the exact same size.
	- Keep a memory limit, track the current size of all loaded assets.
	- If we cross the limit, evict the least-recently-used asset.
	- At the end of a level, we can also evict all level-specific assets if we want?
	- Track evictions so we can monitor it and see if it's misbehaving.
- Automatic file-reloading. https://msdn.microsoft.com/en-us/library/windows/desktop/aa365465(v=vs.85).aspx
	- For now, we can trigger reloadAssets() completely when we detect this.
- Asset packer of some kind. Maybe just creates an assets table?
- Strings! Translateable and stored as assets.
	- https://blog.thimbleweedpark.com/text_lock
	- BETTER: https://ourmachinery.com/post/localization-in-the-machinerys-ui/
- Audio when we have that!

String HashTable!
- MeowHash???
- Maybe MurmurHash? https://en.wikipedia.org/wiki/MurmurHash
- Other hashes: http://www.cse.yorku.ca/~oz/hash.html

Console:
- Why does typing a space not move the caret far enough? I must be measuring the wrong thing.
	- OK, it's because we want the xAdvance but don't have it by that point. yay
- Console eats all input events while it is open?
- Automatic parameter type checking? That might be crazy though.

Return false for isKeyPressed() etc, when the key is a printable character and we have a text input active?

Strings:
- translation! getString("string_id") return the localised string.
	- Read strings from a compiled file. (.mo? https://www.gnu.org/software/gettext/manual/html_node/MO-Files.html)
	- Managed by assets system
	- Reload correctly
	- Can switch language at runtime

Unicode stuff:
- 2-stage table for properties, will save space! Not sure if I need that, but thought it was sensible to put the link here in case I do. https://www.strchr.com/multi-stage_tables

Arenas:
- Figure out how to prevent non-temp allocations happening when temp mem is open.

GAME:
- Menu / Game are separate code.

BUGS:
- Unloading Fraps does something funny with our Window reference, causing a crash.

FULLSCREEN!
- It's weird and buggy right now. Probably want to do the FULLSCREEN_DESKTOP flag, with special case code to make it centred on the screen and make sure input works.

Rendering 2.0:
- At some point, need to distinguish between "flat" sprites (e.g. field)  and "tall" ones (e.g. barn, farmhouse, farmer).
- Draw things with an offset, defined per-texture-region(?)
- Probably replace the binary search for glyphs with something better?
- Handle cursors ourselves? Not sure about latency.

Asset packing:
- Pack asset PNGs into a set of standard-sized ones, with 1 px of padding around them
	for the bilinear filtering
- Store TextureRegion information in a little binary file
- Read data from these rather than hard-coded filenames

---------------------------------------------
NOTES:
---------------------------------------------

BUILD:

For future reference, here's the build system config for sublime text 3:
{
	"shell_cmd": "build.bat",
	"working_dir": "${file_path}",
	"file_regex": "^(...*?)[(]([0-9]*)[)]",
	"shell": true,
	"encoding": "gb2312"
}
Took me WAY TOO LONG to make that work.