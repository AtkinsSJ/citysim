------------------------------------------------
TODO: https://trello.com/b/0Z1oVdg9/under-london
------------------------------------------------
I don't know whether I prefer keeping the list here or on Trello.
Trello is nice, but it's ALL THE WAY OVER THERE in a different program! (Which requires my internet to work...)

Console:
- Console eats all input events while it is open?
- Scrolling?
- Automatic parameter type checking? That might be crazy though.
- Animate console open/close?
- Better input
	- Up to copy previous command
	- Draw caret at correct position when text is on multiple lines???

Return false for isKeyPressed() etc, when the key is a printable character and we have a text input active?

Strings:
- Use String everywhere, rather than char*.
- printf() that only takes indices, and all arguments are strings. You then use formatInt() &c to convert values to strings.
	- e.g. printf("This {0} costs Â£{1}", item->name, formatFloat(item->price, <decimal places>));
- translation! getString("string_id") return the localised string.
	- Read strings from a compiled file. (.mo? https://www.gnu.org/software/gettext/manual/html_node/MO-Files.html)
	- Managed by assets system
	- Reload correctly
	- Can switch language at runtime

Asset system:
- Asset packer of some kind. Maybe just creates an assets table?
- Load ui theme from a file
- Load texture region information from a file
- Strings! Translateable and stored as assets.
	- https://blog.thimbleweedpark.com/text_lock
- Audio when we have that!

Arenas:
- Figure out how to prevent non-temp allocations happening when temp mem is open.

UI Theme:
- Rather than always doing getFont() etc, maybe cache a font ref from the assets system and then
  reload it when the assets change.
- Could move the UITheme into UIState, again getting it from the assets system once then refreshing
  when it's reloaded. Would save passing the assets system to everywhere in the UI code.
- What is it?!?!
	- All the information about how to draw the UI.
	- So, font/colour/padding etc for a button, or a menu item.
	- Do we want styles within this? So you say "this is a 'fancy' button, this is a 'normal' button"?
	- If we want to go crazy we could define the UI itself in data. But that sounds awkward and unnecessary.
		- Though I think I want to do that for the fancy text screens, as planned.
		  (Victiorian typography, lots of different fonts and sizes and styles.)

GAME:
- Menu / Game are separate code.
- Draw a map
- Draw a grid over it
- Create pipes
- They link

BUGS:
- Unloading Fraps does something funny with our Window reference, causing a crash.

Rendering 2.0:
- Stop passing a size to drawSprite()! Will always draw at a consistent size.
- At some point, need to distinguish between "flat" sprites (e.g. field)  and "tall" ones (e.g. barn, farmhouse, farmer).
- Draw things with an offset, defined per-texture-region(?)
- Flash funds label when it changes
- Probably replace the binary search for glyphs with something better?
- Handle cursors ourselves? Not sure about latency.

Asset packing:
- Pack asset PNGs into a set of standard-sized ones, with 1 px of padding around them
	for the bilinear filtering
- Store TextureRegion information in a little binary file
- Read data from these rather than hard-coded filenames


ENGINE:
- Audio!
	- Sound effects
	- Pitch shifting
	- Music
- An actual random number generator!
- Temporary memory automatically closes when it leaves scope?
- Scenarios
	- A background image, a size, etc.

---------------------------------------------
NOTES:
---------------------------------------------

BUILD:

For future reference, here's the build system config for sublime text 3:
{
	"shell_cmd": "build.bat",
	"working_dir": "${file_path}",
	"file_regex": "^(...*?)[(]([0-9]*)[)]",
	"shell": true,
	"encoding": "gb2312"
}
Took me WAY TOO LONG to make that work.